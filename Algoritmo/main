 //#include <HMC5883L_Simple.h>
  #include <Wire.h>
  #include "Robo.h"

  Robo *robo;
  Robo *caminho; // Array dinâmico para armazenar o caminho
  int caminhoSize = 0; // Número atual de elementos no caminho
  int caminhoCapacity = 10; // Capacidade inicial do array

  float circunferenciaRoda = 22;
  float pulsosPorRevolucao = 20;
  float distanciaEntreRodas = 22;

  //HMC5883L_Simple Compass;

  const byte interruptPin1 = 2;   
  const byte interruptPin2 = 3;   

  volatile unsigned long pulseCountA = 0;  
  volatile unsigned long pulseCountB = 0;  
  volatile unsigned long totalPulseCountA = 0;  
  volatile unsigned long totalPulseCountB = 0;  

  int IN1 = 8;
  int IN2 = 9;
  int IN3 = 10;
  int IN4 = 11;
  
  int ENA = 12;
  int ENB = 13;


  const int pinoTrig[] = {49, 51, 53};
  const int pinoEcho[] = {48, 50, 52};

  // Ângulos dos sensores em graus
  const int angulosSensores[] = {-90, 0, 90}; 
  const int numSensores = 3;

  bool movimentoConcluido = false;
  bool movimentoReto = false;
  bool movimentoGirar = false;

  float thetaAtual = 0;

  float k_rep = 5000;
  float d0 = 25; //zona de influencia obstaculos
  float dq = 1; //ao estar 1m do objetivo o modo de aproximação passa de conico para quadratico
  float dt = 5;
  float maxSpeed = 100;
  float k_att_quadratico = 5.0;
  float k_att_conico = 0.1;

  float forceX = 0;
  float forceY = 0;
  float cordX, cordY, goalX, goalY;
  float* obstaculosX;
  float* obstaculosY;
  int numObstaculos = 0;
 
 
  String status= "desocupado";

  void setup() {
    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT); 
    pinMode(IN3, OUTPUT);
    pinMode(IN4, OUTPUT);
    pinMode(ENA, OUTPUT);
    pinMode(ENB, OUTPUT);

    pinMode(interruptPin1, INPUT_PULLUP);  
    pinMode(interruptPin2, INPUT_PULLUP);  
    
    attachInterrupt(digitalPinToInterrupt(interruptPin1), handleInterruptA, HIGH); 
    attachInterrupt(digitalPinToInterrupt(interruptPin2), handleInterruptB, HIGH);  
    
    /*for (int i = 0; i < 3; i++) {
      pinMode(pinoTrig[i], OUTPUT);
      pinMode(pinoEcho[i], INPUT);
    } */

    Serial.begin(115200); // Configfura a taxa de transmissão para 115200 bps
    Serial1.begin(9600);
  
    /*Wire.begin();
    Compass.SetDeclination(-21, 16, 'W');
    Compass.SetSamplingMode(COMPASS_SINGLE);
    Compass.SetScale(COMPASS_SCALE_130);
    Compass.SetOrientation(COMPASS_HORIZONTAL_X_NORTH); */

    robo = new Robo(0, 0, 0);

    // Inicializa o array dinâmico
    caminho = new Robo[caminhoCapacity];
    caminho[0] = *robo;
    caminhoSize = 1;
    Serial.println("Setup Concluído");
  }

  void loop() {


     
    if (status == "desocupado") {
        if (Serial1.available()) {
          String entrada = Serial1.readStringUntil(';');
          entrada.trim();
          
          if(entrada != ""){
            processarEntrada(entrada);
            delay(100);
            
          }
        }
      } else {
        navigateToPoint(goalX, goalY);
      } 
   
   
  }
void processarEntrada(const String& input) {
    // Variáveis temporárias para leitura
    String RoboX, RoboY, RoboTheta, tempGoalX, tempGoalY;
    int pos = 0;

    // Lendo as coordenadas do robô e do objetivo
    RoboX = input.substring(pos, input.indexOf(',', pos));
    pos = input.indexOf(',', pos) + 1;
    RoboY = input.substring(pos, input.indexOf(',', pos));
    pos = input.indexOf(',', pos) + 1;
    RoboTheta = input.substring(pos, input.indexOf(',', pos));
    pos = input.indexOf(',', pos) + 1;
    tempGoalX = input.substring(pos, input.indexOf(',', pos));
    pos = input.indexOf(',', pos) + 1;
    tempGoalY = input.substring(pos, input.indexOf(',', pos));
    pos = input.indexOf(',', pos) + 1;

    
    // Convertendo para float
    cordX = RoboX.toFloat();
    cordY = RoboY.toFloat();
    thetaAtual = RoboTheta.toFloat();
    goalX = tempGoalX.toFloat();  // Atualizando as variáveis globais
    goalY = tempGoalY.toFloat();

    // Contando o número de delimitadores ',' para determinar o número de obstáculos
    int numDelimitadores = 0;
    for (int i = 0; i < input.length(); i++) {
        if (input.charAt(i) == ',') {
            numDelimitadores++;
        }
    }

    // Calculando o número de obstáculos
    numObstaculos = (numDelimitadores - 4) / 2;

    // Alocando memória para os arrays de obstáculos
    obstaculosX = new float[numObstaculos];
    obstaculosY = new float[numObstaculos];

    // Extraindo as coordenadas dos obstáculos
    for (int i = 0; i < numObstaculos; i++) {
        obstaculosX[i] = input.substring(pos, input.indexOf(',', pos)).toFloat();
        pos = input.indexOf(',', pos) + 1;
        obstaculosY[i] = input.substring(pos, input.indexOf(',', pos)).toFloat();
        pos = input.indexOf(',', pos) + 1;

        
    }

    // Atualizando o robô
    robo->SetX(cordX);
    robo->SetY(cordY);
    robo->SetTheta(thetaAtual);


     

    // Exibindo no Serial Monitor
    Serial.print("Mensagem recebida: ");
    Serial.println(input);
    Serial.print("Status: ocupado");
    Serial1.print("ocupado;");
    status = "ocupado";
    Serial1.flush();
} 
  

  void motorControl(int in1, int in2, int state1, int state2) {
    digitalWrite(in1, state1);
    digitalWrite(in2, state2);
  }

  void andarFrente(int cm) {
    Serial.print("ANDANDO PARA FRENTE");
    Serial.println(cm);
    movimentoReto = false;
    int pulsos = cm / 1.1;
    float anguloAntes = robo->GetTheta();
    pulseCountA = 0;
    pulseCountB = 0;

    while (!movimentoReto) {
      motorControl(IN1, IN2, HIGH, LOW);
      motorControl(IN3, IN4, HIGH, LOW);

      // Diminui a potência quando faltar 10 pulsos
        if (pulseCountA >= pulsos - 15) {
            analogWrite(ENA, 255); // Reduz a potência do motor A
        } else if(pulseCountA >= pulsos - 5){
            analogWrite(ENA, 255); // Reduz a potência do motor A
        } 
        else {
            analogWrite(ENA, 255); // Potência máxima
        }
        if (pulseCountB >= pulsos - 15) {
            analogWrite(ENB, 255); // Reduz a potência do motor B
        } else if(pulseCountB >= pulsos - 5 ){
          analogWrite(ENB, 255); // Reduz a potência do motor A
        } 
        else {
            analogWrite(ENB, 255); // Potência máxima
        }

        if (pulseCountA >= pulsos) {
            motorControl(IN1, IN2, LOW, LOW); // Freia a roda A
            delay(100);
        }
        if (pulseCountB >= pulsos) {
            motorControl(IN3, IN4, LOW, LOW); // Freia a roda B
            delay(100);
        }

      if (pulseCountA >= pulsos && pulseCountB >= pulsos) {
        //movimento concluido
        motorControl(IN1, IN2, LOW, LOW);
        motorControl(IN3, IN4, LOW, LOW);
        delay(300);
        
        movimentoReto = true;
        pulseCountA = 0;
        pulseCountB = 0;
        float anguloDepois = robo->GetTheta();
         
        
         

        // Expande o array se necessário
        if (caminhoSize >= caminhoCapacity) {
          caminhoCapacity *= 2;
          Robo *novoCaminho = new Robo[caminhoCapacity];
          for (int i = 0; i < caminhoSize; ++i) {
            novoCaminho[i] = caminho[i];
          }
          delete[] caminho;
          caminho = novoCaminho;
        }

        caminho[caminhoSize++] = Robo(robo->GetX(), robo->GetY(), robo->GetAtualTheta());
      }
    }
  }

  void girarPosicao(int angulo) {
    
    Serial.print("GIRANDO POSICAO : ");
    Serial.println(angulo);
    
    int comprimentoArco = (angulo/360.0) * (2 * M_PI * distanciaEntreRodas);
    int pulsos = round(comprimentoArco / 1.1);
    float anguloAntes = robo->GetTheta();
    pulseCountA = 0;
    pulseCountB = 0;
    if (!movimentoGirar) {
      if (pulsos > 0) {  
      // Giro no sentido horário
      motorControl(IN1, IN2, HIGH, LOW); // Motor A (sentido horário)
      motorControl(IN3, IN4, LOW, HIGH); // Motor B (sentido anti-horário)
      
       Serial.print("ESTOU AQUI 1 ");

      } else if (pulsos < 0) {  
      // Giro no sentido anti-horário
      motorControl(IN1, IN2, LOW, HIGH); // Motor A (sentido anti-horário)
      motorControl(IN3, IN4, HIGH, LOW); // Motor B (sentido horário)
       Serial.print("ESTOU AQUI 2 ");
      }
      movimentoGirar = true;
    }

    int pulsosCadaRoda = abs(pulsos)/2.0; // divide os pulsos pela metade para cada roda
    Serial.print("pulsos roda : ");
    Serial.println(pulsosCadaRoda);


    while(movimentoGirar){
      
      if(pulseCountA >= pulsosCadaRoda-15){
         analogWrite(ENA, 255); // Reduz a potência do motor A
          
      } else {
        analogWrite(ENA, 255); // Potência máxima
      }
      if(pulseCountB >= pulsosCadaRoda-15){
         
         analogWrite(ENB, 255); // Reduz a potência do motor A
      } else {
         
         analogWrite(ENB, 255); // Potência máxima
      }

      if (pulseCountA >= pulsosCadaRoda ) { 
          
        motorControl(IN1, IN2, HIGH, HIGH); //Freia a roda
      }
      if (pulseCountB >= pulsosCadaRoda) {
        motorControl(IN3, IN4, HIGH, HIGH); //Freia a roda
            
      }

      if (pulseCountA >= pulsosCadaRoda && pulseCountB >= pulsosCadaRoda) {
        //movimento concluido
      
        motorControl(IN1, IN2, LOW, LOW);
        motorControl(IN3, IN4, LOW, LOW);

        //verifica se o carro girou o angulo certo e se esta dentro da margem de erro
        int result = pulseCountA-pulseCountB;
        int grausAjuste = round((result * 1.1 * 360) / (2 * M_PI * distanciaEntreRodas)); 
        //atualiza o angulo do carro
        //float anguloDepois = robo->GetTheta();
       
         
        if (abs(grausAjuste) > 25) { // definir a margem de erro (aqui esta 12º)
          girarPosicao(grausAjuste); //rotaciona o restante (para chegar o mais proximo do angulo)
        } else {
          movimentoGirar = false; // define movimentoGirar como falso para sair do while e finalizar o movimento
          //atualiza as coordenadas do carrinho 
          status = "desocupado";
          Serial1.print("desocupado;");
         
          //verifica se o vetor ainda tem espaço para adcionar mais um objeto carrinho,
          // caso nao tenha dobra o tamanho e passa todos os dados para o novo vetor
          if (caminhoSize >= caminhoCapacity) {
            caminhoCapacity *= 2;
            Robo *novoCaminho = new Robo[caminhoCapacity];
            for (int i = 0; i < caminhoSize; ++i) {
              novoCaminho[i] = caminho[i];
            }
            delete[] caminho;
            caminho = novoCaminho;
          }
          //adciona um OBJ robo no vetor caminho
          caminho[caminhoSize++] = Robo(robo->GetX(), robo->GetY(), robo->GetTheta());
        }
      }
    }
  }

  void navigateToPoint(float goalX, float goalY) {
    float deltaX = goalX - robo->GetX();
    float deltaY = goalY - robo->GetY();
    float distance = sqrt(deltaX * deltaX + deltaY * deltaY);
    float angleToTarget = atan2(deltaY, deltaX) * 180 / M_PI;

    float angleToTurn = angleToTarget - robo->GetTheta();
    

    float stepSize = 30.0;

    while (distance > 3) {
       Serial.print("ESTOU EMBAIXO DE  girarPosicao(angleToTurn); ");
      float *forces = atualizarForcas(goalX, goalY);
      float forceX = forces[0];
      float forceY = forces[1];
      Serial.print("Forca X:") ;
      Serial.println(forceX) ;
      Serial.print("Forca Y:") ;
      Serial.println(forceY) ;

      float resultantAngle = atan2(forceY, forceX) * 180 / M_PI;
      float angleToTurn = resultantAngle - robo->GetTheta();
      Serial.print("resultantAngle:") ;
      Serial.println(resultantAngle) ;

      if(abs(angleToTurn) > 0) {
        girarPosicao(angleToTurn);
      }
      Serial.print("Angulo resultantAngle: ");
      Serial.println(resultantAngle);
      Serial.print("Angulo robo->GetTheta() ");
      Serial.println(robo->GetTheta());
     
      
      if(distance < stepSize) { // Se a distancia for menor que stepSize, o robo anda a distancia restante
        andarFrente(distance);
        
   
      } else {
        andarFrente(stepSize);
         
 
      }
      status = "desocupado";
      Serial1.print("desocupado;");
      atualizarPosicao();
      deltaX = goalX - robo->GetX();
      deltaY = goalY - robo->GetY();
      distance = sqrt(deltaX * deltaX + deltaY * deltaY);
    }
  }

  float* atualizarForcas(float goalX, float goalY) {
    float distToGoal = sqrt(pow(goalX - robo->GetX(), 2) + pow(goalY - robo->GetY(), 2));
    Serial.print("Distancia para o objetivo: ");
    Serial.println(distToGoal);

    float forceAttConicoX = 0;
    float forceAttConicoY = 0;
    
    float forceAttQuadraticoX = 0;
    float forceAttQuadraticoY = 0;

    if (distToGoal < dq) {
      forceAttQuadraticoX = k_att_quadratico * (goalX - robo->GetX()) * distToGoal;
      forceAttQuadraticoY = k_att_quadratico * (goalY - robo->GetY()) * distToGoal;
      Serial.print("forceAttQuadraticoX: ");
      Serial.println(forceAttQuadraticoX);
      Serial.print("forceAttQuadraticoY: ");
      Serial.println(forceAttQuadraticoY);
    } else {
      forceAttConicoX = k_att_conico * (goalX - robo->GetX());
      forceAttConicoY = k_att_conico * (goalY - robo->GetY());
      Serial.print("forceAttConicoX: ");
      Serial.println(forceAttConicoX);
      Serial.print("forceAttConicoY: ");
      Serial.println(forceAttConicoY);
    }

    float forceRepX = 0;
    float forceRepY = 0;

    if(numObstaculos > 0){
      for (int i = 0; i < numObstaculos; i++) {
        float obstDistX = obstaculosX[i] - robo->GetX();
        float obstDistY = obstaculosY[i] - robo->GetY();
        float obstDist = sqrt(pow(obstDistX, 2) + pow(obstDistY, 2));
         Serial.print("obstDist: ");
        Serial.println(obstDist);
         
         
        // Calcula a força de repulsão apenas se o obstáculo estiver dentro da zona de influência
        if (obstDist < d0) {
          float repulsion = k_rep  * (1.0 / obstDist - 1.0 / d0) / pow(obstDist, 2.0);
          forceRepX += repulsion * (obstDistX / obstDist);
           Serial.print("obstDistX: ");
          Serial.println(obstDistX);
          Serial.print("obstDist: ");
          Serial.println(obstDist);

          forceRepY += repulsion * (obstDistY / obstDist);
           Serial.print("obstDistY: ");
          Serial.println(obstDistY);
          Serial.print("obstDist: ");
          Serial.println(obstDist);


           Serial.print("forceRepX: ");
          Serial.println(forceRepX);
           Serial.print("forceRepY: ");
          Serial.println(forceRepY);
        }
    }
    } 

    forceX = forceAttConicoX + forceAttQuadraticoX - forceRepX;
    forceY = forceAttConicoY + forceAttQuadraticoY - forceRepY;

    float forceMagnitude = sqrt(forceX * forceX + forceY * forceY);
    if (forceMagnitude > maxSpeed) {
      forceX = (forceX / forceMagnitude) * maxSpeed;
      forceY = (forceY / forceMagnitude) * maxSpeed;
      Serial.print("Forca X1:") ;
      Serial.println(forceX) ;
      Serial.print("Forca Y1:") ;
      Serial.println(forceY) ;
    }

    static float result[2];
    result[0] = forceX * dt;
    result[1] = forceY * dt;
    Serial.print("Forca X2:") ;
      Serial.println(forceX) ;
      Serial.print("Forca Y2:") ;
      Serial.println(forceY) ;
    return result;
  }

  float calculaMediaDasDistancias(int pinoTrig, int pinoEcho) {
    float distancia = 0;
    for (int i = 0; i < 5; i++) {
      digitalWrite(pinoTrig, LOW);
      delayMicroseconds(2);
      digitalWrite(pinoTrig, HIGH);
      delayMicroseconds(10);
      digitalWrite(pinoTrig, LOW);
      float duracao = pulseIn(pinoEcho, HIGH);
      distancia += (duracao * 0.034 / 2);
    }
    return distancia / 5;
  }

  volatile unsigned long lastInterruptTimeA = 0;
  volatile unsigned long lastInterruptTimeB = 0;
  const unsigned long debounceDelay = 8;

  void handleInterruptA() {
    unsigned long interruptTime = millis();
    if (interruptTime - lastInterruptTimeA > debounceDelay) {
      pulseCountA++;
      totalPulseCountA++;
      lastInterruptTimeA = interruptTime;
      Serial.print("Pulso A: ");
      Serial.print(pulseCountA);
      Serial.print(" -- Pulso B: ");
      Serial.println(pulseCountB);
    }
  }

  void handleInterruptB() {
    unsigned long interruptTime = millis();
    if (interruptTime - lastInterruptTimeB > debounceDelay) {
      pulseCountB++;
      totalPulseCountB++;
      lastInterruptTimeB = interruptTime;
      Serial.print("Pulso A: ");
      Serial.print(pulseCountA);
      Serial.print(" -- Pulso B: ");
      Serial.println(pulseCountB);
    }
  }

  void atualizarPosicao() {
      // Imprime o status atual e envia pela Serial1
    
      if (status == "desocupado") {
       
        while (status == "desocupado") {
          
          String entrada = Serial1.readStringUntil(';');
          entrada.trim();
          if(entrada != ""){
            Serial.print("ESSA EH A MENSAGEM DO ATUALIZAR: ");
            Serial.println(entrada);
            processarEntrada(entrada);
            delay(100);
          }
        }
    
      }  
  }




 
