 

#include <ArduinoJson.h> 
#include <ArduinoJson.hpp>

#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>

#include "Arduino.h"
#include "soc/soc.h"           // Disable brownout problems
#include "soc/rtc_cntl_reg.h"  // Disable brownout problems
#include "driver/rtc_io.h"
#include <SPIFFS.h>
#include <FS.h>


// Replace with your network credentials
const char* ssid = "Monteiro";
const char* password = "12345678";

String status = "desocupado";  // Inicializa em "desocupado"

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// Photo File Name to save in SPIFFS
#define FILE_PHOTO "/photo.jpg"

// Initialize Serial communication with Arduino Mega (Assuming default Serial0)
// If you are using different pins, make sure to initialize Serial1 or Serial2
HardwareSerial mySerial(1);

// HTML page served by the server
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body { text-align:center; }
    .vert { margin-bottom: 10%; }
    .hori{ margin-bottom: 0%; }
  </style>
</head>
<body>
  <div id="container">
    <h2>ESP32 Last Photo</h2>
    <p>It might take more than 5 seconds to capture a photo.</p>
    <p>
      <button onclick="rotatePhoto();">ROTATE</button>
      <button onclick="capturePhoto()">CAPTURE PHOTO</button>
      <button onclick="location.reload();">REFRESH PAGE</button>
    </p>
  </div>
  <div><img src="saved-photo" id="photo" width="70%"></div>
</body>
<script>
  var deg = 0;
  function capturePhoto() {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', "/capture", true);
    xhr.send();
  }
  function rotatePhoto() {
    var img = document.getElementById("photo");
    deg += 90;
    if(isOdd(deg/90)){ document.getElementById("container").className = "vert"; }
    else{ document.getElementById("container").className = "hori"; }
    img.style.transform = "rotate(" + deg + "deg)";
  }
  function isOdd(n) { return Math.abs(n % 2) == 1; }
</script>
</html>)rawliteral";

void setup() {
  // Serial port for debugging purposes
  Serial.begin(115200);
  
  // Initialize Serial communication with Arduino Mega
  mySerial.begin(9600, SERIAL_8N1, 16, 17); // Change to your TX and RX pins

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  if (!SPIFFS.begin(true)) {
    Serial.println("An Error has occurred while mounting SPIFFS");
    ESP.restart();
  } else {
    delay(500);
    Serial.println("SPIFFS mounted successfully");
  }

  // Print ESP32 Local IP Address
  Serial.print("IP Address: http://");
  Serial.println(WiFi.localIP());

  // Turn-off the 'brownout detector'
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send_P(200, "text/html", index_html);
  });

  server.on("/capture", HTTP_GET, [](AsyncWebServerRequest * request) {
    // Dummy handler for capturing photo
    request->send_P(200, "text/plain", "Taking Photo");
  });

  server.on("/saved-photo", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send(SPIFFS, FILE_PHOTO, "image/jpg", false);
  });

  server.on("/enviar-coord", HTTP_POST, [](AsyncWebServerRequest *request) {
    String xRobo = "";
    String yRobo = "";
    String orientacaoRobo = "";
    String goalX = "";
    String goalY = "";
    // Recupera os parâmetros do pedido
    if (request->hasParam("roboX", true)) {
        xRobo = request->getParam("roboX", true)->value();
    }
    if (request->hasParam("roboY", true)) {
        yRobo = request->getParam("roboY", true)->value();
    }
    if (request->hasParam("roboTheta", true)) {
        orientacaoRobo = request->getParam("roboTheta", true)->value();
    }
    if (request->hasParam("goalX", true)) {
        goalX = request->getParam("goalX", true)->value();
    }
    if (request->hasParam("goalY", true)) {
        goalY = request->getParam("goalY", true)->value();
    }
    // Cria um StringBuilder para armazenar todos os dados
    String outputData = xRobo + "," + yRobo + "," + orientacaoRobo + "," + goalX + ","+ goalY;

    // Lidar com os obstáculos
    for (int i = 1; i <= 10; i++) { // Mude o limite conforme necessário
        String xObstaculoKey = "obstaculo" + String(i) + "X";
        String yObstaculoKey = "obstaculo" + String(i) + "Y";
        
        if (request->hasParam(xObstaculoKey, true) && request->hasParam(yObstaculoKey, true)) {
            String xObstaculoValue = request->getParam(xObstaculoKey, true)->value();
            String yObstaculoValue = request->getParam(yObstaculoKey, true)->value();
            // Adiciona coordenadas do obstáculo à saída
            outputData += "," + xObstaculoValue + "," + yObstaculoValue;
        } else {
            break; // Para quando não houver mais obstáculos
        }
    }

    outputData += ";"; // 3,2,4,1,4.24,24,2,4; (roboX, roboY, roboTheta, obst1X, obst1Y, obst2X, obst2Y, obst3X, obst3Y)

    // Log dos dados a serem enviados
    Serial.println(outputData);

    // Envia a string formatada para o Arduino Mega
    mySerial.println(outputData);

    // Muda o status para "ocupado"
    status = "ocupado";

    // Responde ao cliente
    request->send(200, "text/plain", "Values received and sent to Arduino Mega");
});



   // Adiciona a nova rota /status que retorna "desocupado"
  server.on("/status", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/plain", status);
  });

  // Start server
  server.begin();
}

void loop() {

  // Verifica se chegou algo pela Serial do Arduino Mega
  if (mySerial.available()) {
    String message = mySerial.readStringUntil(';'); //recebe desocupado;
    message.trim();  //Remove espacos
    
    if (message.equalsIgnoreCase("desocupado")) { //A função equalsIgnoreCase() faz essa comparação sem considerar a diferença entre letras maiúsculas e minúsculas
      status = "desocupado";  // Muda o status para "desocupado"
      Serial.println("Status changed to: desocupado");
    }
  }

  delay(1);
}
 
